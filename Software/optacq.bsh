import java.util.List;
import org.micromanager.data.Coords;
import org.micromanager.data.Datastore;
import org.micromanager.data.Image;
import ij.IJ;

//----------------------------------------------------------------------//
//----------------------------Input Parameters-------------------------//

baseFile = "463492";  //6 digit specimen ID
rootDirName = "D:/diyOPT/20190624";

transExTime = 0.5;
fluorExTime = 999.;

//--------------------Do not edit below this line---------------------//

com = "COM3";
term = "\n";

// acquire pre-frame
mmc.setProperty("IDS uEye", "Trigger", "internal");
mmc.waitForSystem();
mmc.setSerialPortCommand(com, "t", term);
mmc.setSerialPortCommand(com, "f", term);
mmc.waitForSystem();

for (k = 0; k < 2; k++) {

	// Shut everything off
	
	String bF = baseFile;

	if (k == 0){
		// Trans acquisition
		mmc.setExposure(transExTime);
		mmc.setSerialPortCommand(com, "f", term);
		mmc.setSerialPortCommand(com, "T", term);
		mmc.waitForSystem();
	}
	else if (k == 1) {
		// Fluor acquisition
		mmc.setExposure(fluorExTime);
		mmc.setSerialPortCommand(com, "t", term);
		mmc.setSerialPortCommand(com, "F", term);
		mmc.waitForSystem();
	}

	// A RAM datastore stores all of its images on RAM, not on the hard drive.
	// There are other options as described in the DataManager documentation.
	Datastore store = mm.data().createRAMDatastore();
	// Create a display for the datastore. This won't actually show up until there
	// are images to see, though.
	mm.displays().createDisplay(store);
	// Snap an image. Don't display it in the snap/live display.
	
	// Let's assume for now that we aren't using a multi-camera setup, so the
	// above list only has one element.
	
	for (i = 0; i < 400; i++) {
	
	
			List images = mm.live().snap(false);
	
			//	Image image = images.get(0);
	
				Image image = images.get(0);
	
	
	
		
		// Set the time and channel indices for this image. Coordinate axes that you
		// don't care about can be left alone.
		Coords.CoordsBuilder builder = mm.data().getCoordsBuilder();
		builder = builder.time(i).channel(0);
		image = image.copyAtCoords(builder.build());
		store.putImage(image);
	
		mmc.setSerialPortCommand(com, "9", term);
		Thread.sleep(100);
	
	}

	// Make new window with first and last frames overlaid
	// First in cyan, last in red
	// This should highlight missed steps or misalignment occasions
	imp = IJ.getImage();
	IJ.run("Make Substack...", "  slices=1,400");
	IJ.run("Stack to Images", "");
	IJ.run(imp, "Merge Channels...", "c1=400 c5=1 create");
	IJ.run("Set... ", "zoom=15");
	imk = IJ.getImage();
	if (k == 0){
		
		//print(bF);
		Thread.sleep(100);
		imk.setTitle(baseFile + "_TransComposite");
	}
	else if (k == 1){
		bF = baseFile + "fluor";
		//print(bF);
		Thread.sleep(100);
		imk.setTitle(baseFile + "_FluorComposite");
	}
		
	
	// Save the datastore.
	String savePath = new File(rootDirName, bF).toString();
	mmc.waitForSystem();
	store.save(Datastore.SaveMode.MULTIPAGE_TIFF, savePath);

	// Shut everything off
	mmc.setSerialPortCommand(com, "t", term);
	mmc.setSerialPortCommand(com, "f", term);
	store.close();
	
}
mmc.setExposure(transExTime);